fn() {
    intro assert = fn(c, m) { #assert(c, m); };
    intro assertFalse = fn(c, m) { #assert(not c, m); };

    (* literals *)
    assert(unavailable = unavailable, 'unavailable literal');
    assert(none = none, 'none literal');
    assert(true, 'true literal');
    assertFalse(false, 'false literal');
    assert(123.457 = 123.457, 'fractional literal');
    assert(123 = 123, 'integral literal');
    assert(-123 = -123, 'negative literal');
    assert('abc' = 'abc', 'string literal');
    assert('' = '', 'empty string literal');
    assert([3, 'abc', []] = [3, 'abc', []], 'sequence literal');
    assert([] = [], 'empty sequence literal');
    assert([1] = [1], 'singleton sequence');
    assert(fn(x) { return x; }(true), 'function literal');
    assert({foo: 'bar', bazz: 'silly'} = {foo: 'bar', bazz: 'silly'},
            'dictionary literal');
    assert({} = {}, 'empty dictionary');
    assert({foo: 'bar'} = {foo: 'bar'}, 'singleton dictionary');

    (* boolean operations *)
    assert(not false, 'not false');
    assertFalse(not true, 'not true');

    assert(true and true, 'true and true');
    assertFalse(false and true, 'false and true');
    assertFalse(true and false, 'true and false');
    assertFalse(false and false, 'false and false');

    assert(true or true, 'true or true');
    assert(false or true, 'false or true');
    assert(true or false, 'true or false');
    assertFalse(false or false, 'false or false');

    assert(not (0 = 1), 'paren precedence');

    (* short circuits *)
    assert(true or 5, 'or short circuit');
    assertFalse(false and 5, 'and short circuit');

    (* otherwise *)
    assert((none otherwise 5) = none, 'otherwise not unavailable');
    assert((unavailable otherwise 5) = 5, 'otherwise available');

    (* pick *)
    decide [0, 2] {
        assert(
                (pick 2 unique from { 'foo' {1}, 'bar' {5}, 'bazz' {5} }) =
                        ['foo', 'bazz'],
                'unique pick explicit weight');
    }

    decide [0, 2] {
        assert(
                (pick 2 unique from { 'foo', 'bar', 'bazz' }) = ['foo', 'bazz'],
                'unique pick implicit weight');
    }

    decide [0, 2] {
        assert(
                (pick 2 from { 'foo' {1}, 'bar' {5}, 'bazz' {5} }) =
                        ['foo', 'bazz'],
                'pick explicit weight');
    }

    decide [0, 2] {
        assert(
                (pick 2 from { 'foo', 'bar', 'bazz' }) = ['foo', 'bazz'],
                'pick implicit weight');
    }

    decide [0, 2] {
        assert(
                (pick 2 unique(true) from { 'foo', 'bar', 'bazz' }) =
                        ['foo', 'bazz'],
                'expression parameterized unique true');
    }

    decide [0, 2] {
        assert(
                (pick 2 unique(false) from { 'foo', 'bar', 'bazz' }) =
                        ['foo', 'bazz'],
                'expression parameterized unique true');
    }

    decide [1] {
        assert(
                (pick 1 from { 'foo', 'bar', 'bazz'}) = 'bar',
                'pick single yields element instead of sequence');
    }

    decide [1] {
        assert(
                (pick from { 'foo', 'bar', 'bazz'}) = 'bar',
                'pick implicit count');
    }

    decide [0, 2] {
        assert(
                (pick 2 from [ 'foo', 'bar', 'bazz' ]) = ['foo', 'bazz'],
                'pick from sequence');
    }

    assert(
            (pick 0 from ['foo', 'bar', 'bazz']) = [],
            'picking zero yields empty sequence');

    assert(
            (pick from {'foo' {0}, 'bar' {0}, 'bazz' {0}}) = unavailable,
            'picking one from no good options yields unavailable');

    assert(
            (pick 3 from {'foo' {0}, 'bar' {0}, 'bazz' {0}}) = unavailable,
            'picking multiple from no good options yields unavailable');

    assert(
            (pick 0 from {'foo' {0}, 'bar' {0}, 'bazz' {0}}) = [],
            'picking zero from no good options yields empty sequence');

    decide [none, 0] {
        assert(
                (pick from [] otherwise pick from {true}) = true,
                'pick with otherwise');
    }

    decide 'apple' {
        intro x = ['a'];
        assert((pick from x) = 'a', 'pick from expression');
    }

    (* accessing *)
    assert( [2, 4, 6, 8][1] = 4, 'sequence access');
    assert( {foo: 2, bar: 4, bazz: 6}.bar = 4, 'dictionary access');
    assert( {foo: 2, bar: 4, bazz: 6}.('bar') = 4,
            'dictionary expression access');

    (* order of operations *)
    assert(1 + 3 * 5 * 2 ^ 4 * (6 + 7) = 3121, 'order of operations');

    (* strings *)
    assert('abc' + 'def' = 'abcdef', 'string concatenation');
    assert('abc' + 4.1 = 'abc(41 / 10)', 'string concatenation with number');

    (* nested structures *)
    assert(
            {
                foo: [
                    [1, 2, {}],
                    {tom: [], dick: ['a'], harry: [4, 5, 6]}
                ],
                bar: [[[[[]]]]]
            }.foo[1].dick[0] = 'a',
            'nested structure');

    (* intro statements *)
    {
        intro x;
        assert(x = unavailable, 'intro statement');
    }

    {
        intro x = 5;
        assert(x = 5, 'intro with assignment');
    }

    (* assignment *)
    {
        intro x;
        x = 5;
        assert(x = 5, 'top level assignment');
    }

    {
        intro x = {};
        x.foo = 5;
        assert(x.foo = 5, 'field assignment');
    }

    {
        intro x = {};
        x.('foo') = 5;
        assert(x.foo = 5, 'field expression assignment');
    }

    {
        intro x = [1];
        x[0] = 5;
        assert(x[0] = 5, 'sequence assignment');
    }

    {
        intro x = {foo: [1, {bar: {bazz: [9, 8, 7]}}, 3]};
        x.foo[1].bar.bazz[2] = 6;
        assert(x.foo[1].bar.bazz[2] = 6, 'multilevel assignment');
    }

    {
        intro x = 5;
        x = x + 1;
        assert(x = 6, 'self assignment');
    }

    (* if statements *)
    {
        intro p = true;
        intro x;
        if p {
            x = 5;
        }
        assert(x = 5, 'if true');
    }

    {
        intro p = false;
        intro x;
        if p {
            x = 5;
        }
        assert(x = unavailable, 'if true');
    }

    {
        intro p = true;
        intro x;
        if p {
            x = 5;
        }
        else {
            x = 6;
        }
        assert(x = 5, 'if else true');
    }

    {
        intro p = false;
        intro x;
        if p {
            x = 5;
        }
        else {
            x = 6;
        }
        assert(x = 6, 'if else false');
    }

    {
        intro y = 1;
        intro x;
        if y = 1 {
            x = 5;
        }
        else if y = 2 {
            x = 6;
        }
        assert(x = 5, 'if else if true #1');
    }

    {
        intro y = 3;
        intro x;
        if y = 1 {
            x = 5;
        }
        else if y = 2 {
            x = 6;
        }
        assert(x = unavailable, 'if else if false');
    }

    {
        intro y = 1;
        intro x;
        if y = 1 {
            x = 5;
        }
        else if y = 2 {
            x = 6;
        }
        else if y = 3 {
            x = 7;
        }
        else {
            x = 8;
        }
        assert(x = 5, 'full if true #1');
    }

    {
        intro y = 2;
        intro x;
        if y = 1 {
            x = 5;
        }
        else if y = 2 {
            x = 6;
        }
        else if y = 3 {
            x = 7;
        }
        else {
            x = 8;
        }
        assert(x = 6, 'full if true #2');
    }

    {
        intro y = 3;
        intro x;
        if y = 1 {
            x = 5;
        }
        else if y = 2 {
            x = 6;
        }
        else if y = 3 {
            x = 7;
        }
        else {
            x = 8;
        }
        assert(x = 7, 'full if true #3');
    }

    {
        intro y = 4;
        intro x;
        if y = 1 {
            x = 5;
        }
        else if y = 2 {
            x = 6;
        }
        else if y = 3 {
            x = 7;
        }
        else {
            x = 8;
        }
        assert(x = 8, 'full if true #4');
    }

    (* for each statement *)
    {
        intro x = '';
        for each {'abc', 'def', 'ghi'} {
            x = x + @;
        }
        assert(x = 'abcdefghi', 'for each explicit pool');
    }

    {
        intro x = '';
        for each s : {'abc', 'def', 'ghi'} {
            x = x + s;
        }
        assert(x = 'abcdefghi', 'for each explicit pool w/ exemplar');
    }

    {
        intro x = '';
        for each ['abc', 'def', 'ghi'] {
            x = x + @;
        }
        assert(x = 'abcdefghi', 'for each sequence');
    }

    {
        intro x = '';
        for each s : ['a', 'b', 'c'] {
            for each {'d', 'e'} {
                x = x + s + @;
            }
        }
        assert(x = 'adaebdbecdce', 'nested for each');
    }

    {
        intro x = '';
        for each {3, 1, 4, 1, 5, 9, 2} where @ > 4 {
            x = x + @;
        }
        assert(x = '59', 'for each where');
    }

    {
        intro x = '';
        for each n : {3, 1, 4, 1, 5, 9, 2} where n > 4 {
            x = x + n;
        }
        assert(x = '59', 'for each where exemplar');
    }

    {
        intro x;
        for each [] {
            x = 5;
        }
        assert(x = unavailable, 'for each no values');
    }

    (* evaluation statement *)
    {
        intro x = fn (y) { #mem(y); };
        x(6);
        assert(#mem(7) = 6, 'evaluation statement');
    }

    (* value semantics *)
    {
        intro x = [1, 2, 3];
        intro y = x;
        x[1] = 9;
        assert([x[1], y[1]] = [9, 2], 'intro initializer value semantics');
    }

    {
        intro x = [1, 2, 3];
        intro y;
        y = x;
        x[1] = 9;
        assert([x[1], y[1]] = [9, 2], 'top level value semantics');
    }

    {
        intro x = [1, 2, 3];
        intro y = {};
        y.foo = x;
        x[1] = 9;
        assert([x[1], y.foo[1]] = [9, 2], 'dictionary field value semantics');
    }

    {
        intro x = [1, 2, 3];
        intro y = ['z'];
        y[0] = x;
        x[1] = 9;
        assert([x[1], y[0][1]] = [9, 2], 'sequence element value semantics');
    }

    {
        intro x = [1, 2, 3];
        intro y = fn (xs) { xs[1] = 9; };
        y(x);
        assert(x[1] = 2, 'function parameter value semantics');
    }

    decide 'apple' {
        intro x = [[1, 2, 3]];
        (pick from x)[1] = 9;
        assert(x[0][1] = 2, 'pick value semantics');
    }

    {
        intro x = [[1, 2, 3]];
        for each e : x {
            e[1] = 9;
        }
        assert(x[0][1] = 2, 'for each value semantics');
    }

    {
        intro x = #proxy('x');
        x.foo = 'abc';
        intro y = x;
        x.foo = 'def';
        assert([x.foo, y.foo] = ['def', 'def'],
                'proxy intro initializer reference semantics');
    }

    {
        intro x = #proxy('x');
        x.foo = 'abc';
        intro y;
        y = x;
        x.foo = 'def';
        assert([x.foo, y.foo] = ['def', 'def'],
                'proxy top level assignment reference semantics');
    }

    {
        intro x = #proxy('x');
        x.foo = 'abc';
        intro y = {};
        y.bar = x;
        x.foo = 'def';
        assert([x.foo, y.bar.foo] = ['def', 'def'],
                'proxy field reference semantics');
    }

    {
        intro x = #proxy('x');
        x.foo = 'abc';
        intro y = ['z'];
        y[0] = x;
        x.foo = 'def';
        assert([x.foo, y[0].foo] = ['def', 'def'],
                'proxy sequence reference semantics');
    }

    {
        intro x = #proxy('x');
        x.foo = 'abc';
        intro y = fn (xs) { xs.foo = 'def'; };
        y(x);
        assert(x.foo = 'def', 'proxy function parameter reference semantics');
    }

    decide 'apple' {
        intro x = #proxy('x');
        x.foo = 'abc';
        (pick from [x]).foo = 'def';
        assert(x.foo = 'def', 'proxy pick reference semantics');
    }
}